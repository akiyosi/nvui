name: build-and-test
on: push
jobs:
  macos:
    runs-on: macos-latest
    env: 
      MACOSX_DEPLOYMENT_TARGET: 10.14
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Install lib
        run: |
          brew update
          brew install fmt boost qt@5 catch2 msgpack
      - name: Update clang
        run: |
          brew upgrade llvm
      - name: check
        continue-on-error: true
        run: |
          ls -l /usr/local/Cellar/msgpack/
          ls -l /usr/local/Cellar/msgpack/3.3.0/include/msgpack.hpp
      - name: Build nvui and nvui_test in Debug mode
        run: |
          # sudo ln -sf /usr/local/opt/msgpack /usr/local/include/msgpack
          # sudo ln -sf /usr/local/opt/msgpack/include/msgpack.hpp /usr/local/include/msgpack.hpp
          export CXX="/usr/local/opt/llvm/bin/clang++" # Switch Clang
          sudo ln -sf /usr/local/Cellar/msgpack/3.3.0_1/include/msgpack.hpp /usr/local/include/msgpack.hpp
          sudo ln -sf /usr/local/Cellar/qt@5.15.2/plugins /usr/local/plugins
          cp -p /usr/local/Cellar/msgpack/3.3.0/include/msgpack.hpp src/
          # Qt5Svg_DIR="/usr/local/Cellar/qt@5/5.15.2/lib/cmake/Qt5Svg" Qt5Widgets_DIR="/usr/local/Cellar/qt@5/5.15.2/lib/cmake/Qt5Widgets" Qt5Gui_DIR="/usr/local/Cellar/qt@5/5.15.2/lib/cmake/Qt5Gui" Qt5Core_DIR="/usr/local/Cellar/qt@5/5.15.2/lib/cmake/Qt5Core" msgpack_DIR="/usr/local/Cellar/msgpack/3.3.0/lib/cmake/msgpack"  fmt_DIR="/usr/local/Cellar/fmt/8.0.1" cmake -B build . -DCMAKE_CXX_FLAGS=-I\ /usr/local/include -DCMAKE_BUILD_TYPE=Release
          Qt5Svg_DIR="/usr/local/Cellar/qt@5/5.15.2/lib/cmake/Qt5Svg" Qt5Widgets_DIR="/usr/local/Cellar/qt@5/5.15.2/lib/cmake/Qt5Widgets" Qt5Gui_DIR="/usr/local/Cellar/qt@5/5.15.2/lib/cmake/Qt5Gui" Qt5Core_DIR="/usr/local/Cellar/qt@5/5.15.2/lib/cmake/Qt5Core" msgpack_DIR="/usr/local/Cellar/msgpack/3.3.0/lib/cmake/msgpack"  fmt_DIR="/usr/local/Cellar/fmt/8.0.1" cmake -B build . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target nvui --config Release
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nvui-darwin
          if-no-files-found: ignore
          path: build/nvui
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - buildtype: 'Debug'
            cc: clang-12
            cxx: clang++-12
            test: true
            upload: false
          - buildtype: 'Release'
            cc: clang-12
            cxx: clang++-12
            test: false
            upload: true
    timeout-minutes: 500
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Update
        run: sudo apt update
      - name: Install Snap (to install Neovim nightly)
        if: matrix.test
        run: sudo apt install snapd
      - name: Install Neovim Nightly
        if: matrix.test
        run: sudo snap install --edge nvim --classic
      - name: Add Neovim to PATH
        if: matrix.test
        run: echo "/snap/bin" >> $GITHUB_PATH
        shell: bash
      - name: Install dependencies for vcpkg packages
        run: >
          sudo apt-get install gperf autoconf build-essential libtool
          libgl1-mesa-dev libxi-dev libx11-dev libxext-dev
          libxkbcommon-x11-dev libglu1-mesa-dev libx11-xcb-dev
          '^libxcb.*-dev' libxrender-dev ninja-build curl
          zip unzip tar autopoint python
      - name: Restore deps
        uses: actions/cache@v2
        with:
          path: |
            build/vcpkg_installed
          key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-${{ env.CC }}-${{ env.CXX }}
      - name: Build nvui and nvui_test in Debug mode
        if: matrix.buildtype == 'Debug'
        run: |
          chmod +x ./scripts/linux/build-debug.sh
          ./scripts/linux/build-debug.sh
      - name: Run tests
        if: matrix.test
        run: ./build/nvui_test
      - name: Copy executable and assets into a folder
        if: matrix.upload
        run: |
          chmod +x ./scripts/linux/package.sh
          chmod +x ./scripts/linux/build-release.sh
          ./scripts/linux/package.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        if: matrix.upload
        with:
          name: nvui-linux-x64
          if-no-files-found: ignore
          path: build/packaged
      - name: Prepare release zip
        if: matrix.upload && startsWith(github.ref, 'refs/tags/')
        run: |
          cd build/packaged
          zip -r nvui-linux-x64.zip assets bin vim
          mv nvui-linux-x64.zip ../..
      - name: Upload release asset
        if: matrix.upload && startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: nvui-linux-x64.zip
          tag: ${{ github.ref }}
          overwrite: false
          body: "Automated release by Github Actions."
  windows-debug:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    timeout-minutes: 500
    env:
      buildDir: '${{ github.workspace }}/build'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          sdk: 10.0.19041.0
      - name: Install Neovim Nightly (needed for tests)
        run: choco install -y neovim --pre
      - name: Add Neovim to PATH
        run: echo "C:\tools\neovim\Neovim\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Restore deps from cache if they exist
        uses: actions/cache@v2
        with:
          path: |
            build/vcpkg_installed
          key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-build-debug-${{ hashFiles('vcpkg.json') }}
      - name: Build nvui and nvui_test
        run: .\scripts\windows\build-debug.ps1
      - name: Run tests
        run: |
          cd build
          .\nvui_test
        shell: cmd
  windows-release:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    timeout-minutes: 500
    env:
      buildDir: '${{ github.workspace }}/build'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          sdk: 10.0.19041.0
      - name: Restore deps from cache if they exist
        uses: actions/cache@v2
        with:
          path: |
            build/vcpkg_installed
          key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-build-release-${{ hashFiles('vcpkg.json') }}
      - name: Package into a zip
        run: .\scripts\windows\package.ps1
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nvui-win64
          if-no-files-found: ignore
          path: build/nvui
      - name: Rename nvui.zip to nvui-win64.zip for release upload
        if: startsWith(github.ref, 'refs/tags/')
        run: ren nvui.zip nvui-win64.zip
      - name: Upload Release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: nvui-win64.zip
          tag: ${{ github.ref }}
          overwrite: false
          body: "Automated release by Github Actions."

